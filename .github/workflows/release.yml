name: CI/CD

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: Test and Tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: go.sum
          
      - name: Create cmd directory
        run: |
          mkdir -p cmd/backtrace
          
      - name: Clone NTrace-core
        run: |
          cd ..
          git clone --depth 1 https://github.com/nxtrace/NTrace-core.git
          cd backtrace
          go mod edit -replace github.com/nxtrace/NTrace-core=../NTrace-core
          
      - name: Download dependencies
        run: |
          go mod download
          go mod tidy
          
      - name: Run Tests
        run: go test ./... -coverprofile=coverage.txt
        
      - name: Create Auto Tag
        if: github.ref == 'refs/heads/main' && success()
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          MAJOR=$(echo $LAST_TAG | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo $LAST_TAG | cut -d. -f2)
          PATCH=$(echo $LAST_TAG | cut -d. -f3 | cut -d- -f1)
          NEW_TAG="v$MAJOR.$MINOR.$((PATCH + 1))-$(date +'%Y%m%d%H%M%S')"
          git tag $NEW_TAG
          git push origin $NEW_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  release:
    name: Build and Release
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: go.sum
          
      - name: Create cmd directory
        run: |
          mkdir -p cmd/backtrace
          
      - name: Clone NTrace-core
        run: |
          cd ..
          git clone --depth 1 https://github.com/nxtrace/NTrace-core.git
          cd backtrace
          go mod edit -replace github.com/nxtrace/NTrace-core=../NTrace-core
          
      - name: Download dependencies
        run: |
          go mod download
          go mod tidy
          
      - name: Build
        run: |
          mkdir -p dist
          VERSION=${GITHUB_REF#refs/tags/}
          if [ "$VERSION" = "" ] || [ "$VERSION" = "refs/heads/main" ]; then
            VERSION=$(git describe --tags --always)
          fi
          LDFLAGS="-s -w -X main.version=$VERSION -X main.buildTime=$(date -u '+%Y-%m-%d %H:%M:%S')"
          # 确保编译时包含所有依赖
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/backtrace-linux-amd64 ./cmd/backtrace
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/backtrace-linux-arm64 ./cmd/backtrace
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/backtrace-darwin-amd64 ./cmd/backtrace
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/backtrace-darwin-arm64 ./cmd/backtrace
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/backtrace-windows-amd64.exe ./cmd/backtrace
          # 设置执行权限
          chmod +x dist/backtrace-*
        shell: /usr/bin/bash -e {0}
          
      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Latest Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: latest
          name: Latest Build
          body: |
            Latest build from main branch
            Built on ${{ github.event.head_commit.timestamp }}
            Version: ${{ github.sha }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
