name: CI/CD

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: Test and Tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: go.sum
          
      - name: Debug Info
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Go version:"
          go version
          echo "Go env:"
          go env
          
      - name: Clone NTrace-core
        run: |
          echo "Cloning NTrace-core..."
          cd ..
          git clone --depth 1 https://github.com/nxtrace/NTrace-core.git
          echo "NTrace-core directory contents:"
          ls -la NTrace-core
          cd backtrace
          go mod edit -replace github.com/nxtrace/NTrace-core=../NTrace-core
          echo "Updated go.mod contents:"
          cat go.mod
          
      - name: Download dependencies
        run: |
          echo "Downloading dependencies..."
          go mod download
          go mod tidy
          echo "Final go.mod contents:"
          cat go.mod
          echo "Dependency tree:"
          go list -m all
          
      - name: Run Tests
        run: |
          echo "Running tests..."
          go test -v ./... -coverprofile=coverage.txt
        
      - name: Create Auto Tag
        if: github.ref == 'refs/heads/main' && success()
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          MAJOR=$(echo $LAST_TAG | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo $LAST_TAG | cut -d. -f2)
          PATCH=$(echo $LAST_TAG | cut -d. -f3 | cut -d- -f1)
          NEW_TAG="v$MAJOR.$MINOR.$((PATCH + 1))-$(date +'%Y%m%d%H%M%S')"
          echo "Creating new tag: $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  release:
    name: Build and Release
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: go.sum
          
      - name: Debug Info
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Go version:"
          go version
          echo "Go env:"
          go env
          
      - name: Clone NTrace-core
        run: |
          echo "Cloning NTrace-core..."
          cd ..
          git clone --depth 1 https://github.com/nxtrace/NTrace-core.git
          echo "NTrace-core directory contents:"
          ls -la NTrace-core
          cd backtrace
          go mod edit -replace github.com/nxtrace/NTrace-core=../NTrace-core
          echo "Updated go.mod contents:"
          cat go.mod
          
      - name: Download dependencies
        run: |
          echo "Downloading dependencies..."
          go mod download
          go mod tidy
          echo "Final go.mod contents:"
          cat go.mod
          echo "Dependency tree:"
          go list -m all
          
      - name: Build
        run: |
          echo "Starting build process..."
          mkdir -p dist
          VERSION=${GITHUB_REF#refs/tags/}
          if [ "$VERSION" = "" ] || [ "$VERSION" = "refs/heads/main" ]; then
            VERSION=$(git describe --tags --always)
          fi
          echo "Building version: $VERSION"
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
          echo "Build time: $BUILD_TIME"
          
          # 确保编译时包含所有依赖
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              # 跳过 Windows ARM64
              if [ "$os" = "windows" ] && [ "$arch" = "arm64" ]; then
                continue
              fi
              
              echo "Building for $os/$arch..."
              export GOOS=$os
              export GOARCH=$arch
              export CGO_ENABLED=0
              
              if [ "$os" = "windows" ]; then
                echo "Building Windows binary..."
                go build -v -trimpath -ldflags="-s -w -X 'main.version=${VERSION}' -X 'main.buildTime=${BUILD_TIME}'" -o "dist/backtrace-${os}-${arch}.exe"
              else
                echo "Building Unix binary..."
                go build -v -trimpath -ldflags="-s -w -X 'main.version=${VERSION}' -X 'main.buildTime=${BUILD_TIME}'" -o "dist/backtrace-${os}-${arch}"
              fi
              
              if [ $? -ne 0 ]; then
                echo "Build failed for $os/$arch"
                exit 1
              fi
            done
          done
          
          echo "Build outputs:"
          ls -la dist/
          
          # 设置执行权限
          chmod +x dist/backtrace-*
        shell: /usr/bin/bash -e {0}
          
      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          echo "Generated checksums:"
          cat checksums.txt
          
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          artifacts: "dist/*"
          draft: false
          prerelease: false
          generateReleaseNotes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Latest Release
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          tag: latest
          name: Latest Build
          body: |
            Latest build from main branch
            Built on ${{ github.event.head_commit.timestamp }}
            Version: ${{ github.sha }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
