name: Build and Release

on:
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'
        
    - name: Build and Test on Default Platform
      run: |
        go mod tidy
        go build -v ./...
        go test -v ./...
  
  release:
    name: Build and Release Assets
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        goos: [windows, freebsd, openbsd, linux, darwin]
        goarch: [amd64, 386]
        exclude:
          - goarch: 386
            goos: darwin
        include:
          - goos: windows
            goarch: 386
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
          - goos: windows
            goarch: arm
            goarm: 7
          - goos: darwin
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          - goos: linux
            goarch: mips64
          - goos: linux
            goarch: mips64le
          - goos: linux
            goarch: mipsle
          - goos: linux
            goarch: mips
          - goos: linux
            goarch: ppc64
          - goos: linux
            goarch: ppc64le
          - goos: freebsd
            goarch: arm64
          - goos: freebsd
            goarch: arm
            goarm: 7
          - goos: openbsd
            goarch: arm64
          - goos: openbsd
            goarch: arm
            goarm: 7
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'

    - name: Get Release Upload URL
      id: get_release
      run: |
        TAG_NAME="0.0.4"
        API_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME"
        RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL")
        
        RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
        UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
        
        if [ "$RELEASE_ID" = "null" ]; then
          echo "Release not found. Creating a new release."
          CREATE_RESPONSE=$(curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"$TAG_NAME\", \"name\": \"Release $TAG_NAME\", \"draft\": false, \"prerelease\": false}" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          
          RELEASE_ID=$(echo "$CREATE_RESPONSE" | jq -r '.id')
          UPLOAD_URL=$(echo "$CREATE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
          
          if [ "$RELEASE_ID" = "null" ]; then
            echo "Failed to create release"
            echo "$CREATE_RESPONSE"
            exit 1
          fi
        else
          echo "Release exists. Deleting existing assets."
          ASSETS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets")
          ASSET_IDS=$(echo "$ASSETS" | jq -r '.[].id')
          
          for ASSET_ID in $ASSET_IDS; do
            echo "Deleting asset with ID: $ASSET_ID"
            curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID"
          done
        fi

        echo "::set-output name=upload_url::$UPLOAD_URL"
    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
      run: |
        mkdir -p bin
        cd cmd
        CGO_ENABLED=0 GOOS=${{ env.GOOS }} GOARCH=${{ env.GOARCH }} GOARM=${{ env.GOARM }} go build -o ../bin/backtrace-${{ env.GOOS }}-${{ env.GOARCH }}${{ env.GOARM }} -v -ldflags="-extldflags=-static" .

    - name: Upload New Assets
      run: |
        UPLOAD_URL="${{ steps.get_release.outputs.upload_url }}"
        for FILE in ./bin/*; do
          FILENAME=$(basename "$FILE")
          echo "Uploading $FILENAME to release..."
          curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$FILE" \
            "$UPLOAD_URL?name=$FILENAME"
        done